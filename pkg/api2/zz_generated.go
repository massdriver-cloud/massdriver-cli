// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api2

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/massdriver-cloud/massdriver-cli/pkg/api2/jsonscalar"
)

// Arguments required to get container repositories
type ContainerRepositoryInput struct {
	Location  string `json:"location"`
	ImageName string `json:"imageName"`
}

// GetLocation returns ContainerRepositoryInput.Location, and is useful for accessing the field via an interface.
func (v *ContainerRepositoryInput) GetLocation() string { return v.Location }

// GetImageName returns ContainerRepositoryInput.ImageName, and is useful for accessing the field via an interface.
func (v *ContainerRepositoryInput) GetImageName() string { return v.ImageName }

type Credential struct {
	ArtifactDefinitionType string `json:"artifactDefinitionType"`
	ArtifactId             string `json:"artifactId"`
}

// GetArtifactDefinitionType returns Credential.ArtifactDefinitionType, and is useful for accessing the field via an interface.
func (v *Credential) GetArtifactDefinitionType() string { return v.ArtifactDefinitionType }

// GetArtifactId returns Credential.ArtifactId, and is useful for accessing the field via an interface.
func (v *Credential) GetArtifactId() string { return v.ArtifactId }

type PreviewEnvironmentInput struct {
	Credentials []Credential `json:"credentials"`
	// GitHub Action event payload.
	CiContext     map[string]interface{} `json:"-"`
	PackageParams map[string]interface{} `json:"-"`
}

// GetCredentials returns PreviewEnvironmentInput.Credentials, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetCredentials() []Credential { return v.Credentials }

// GetCiContext returns PreviewEnvironmentInput.CiContext, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetCiContext() map[string]interface{} { return v.CiContext }

// GetPackageParams returns PreviewEnvironmentInput.PackageParams, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetPackageParams() map[string]interface{} { return v.PackageParams }

func (v *PreviewEnvironmentInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PreviewEnvironmentInput
		CiContext     json.RawMessage `json:"ciContext"`
		PackageParams json.RawMessage `json:"packageParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PreviewEnvironmentInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CiContext
		src := firstPass.CiContext
		if len(src) != 0 && string(src) != "null" {
			err = json.Unmarshal(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal PreviewEnvironmentInput.CiContext: %w", err)
			}
		}
	}

	{
		dst := &v.PackageParams
		src := firstPass.PackageParams
		if len(src) != 0 && string(src) != "null" {
			err = json.Unmarshal(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal PreviewEnvironmentInput.PackageParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPreviewEnvironmentInput struct {
	Credentials []Credential `json:"credentials"`

	CiContext json.RawMessage `json:"ciContext"`

	PackageParams json.RawMessage `json:"packageParams"`
}

func (v *PreviewEnvironmentInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PreviewEnvironmentInput) __premarshalJSON() (*__premarshalPreviewEnvironmentInput, error) {
	var retval __premarshalPreviewEnvironmentInput

	retval.Credentials = v.Credentials
	{

		dst := &retval.CiContext
		src := v.CiContext
		var err error
		*dst, err = jsonscalar.Marshal(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PreviewEnvironmentInput.CiContext: %w", err)
		}
	}
	{

		dst := &retval.PackageParams
		src := v.PackageParams
		var err error
		*dst, err = jsonscalar.Marshal(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PreviewEnvironmentInput.PackageParams: %w", err)
		}
	}
	return &retval, nil
}

// __deployPreviewEnvironmentInput is used internally by genqlient
type __deployPreviewEnvironmentInput struct {
	OrgId     string                  `json:"orgId"`
	ProjectId string                  `json:"projectId"`
	Input     PreviewEnvironmentInput `json:"input"`
}

// GetOrgId returns __deployPreviewEnvironmentInput.OrgId, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetOrgId() string { return v.OrgId }

// GetProjectId returns __deployPreviewEnvironmentInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetProjectId() string { return v.ProjectId }

// GetInput returns __deployPreviewEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetInput() PreviewEnvironmentInput { return v.Input }

// __getArtifactsByTypeInput is used internally by genqlient
type __getArtifactsByTypeInput struct {
	OrganizationId string `json:"organizationId"`
	ArtifactType   string `json:"artifactType"`
}

// GetOrganizationId returns __getArtifactsByTypeInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetOrganizationId() string { return v.OrganizationId }

// GetArtifactType returns __getArtifactsByTypeInput.ArtifactType, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetArtifactType() string { return v.ArtifactType }

// __getContainerRepositoryInput is used internally by genqlient
type __getContainerRepositoryInput struct {
	ArtifactId     string                   `json:"artifactId"`
	OrganizationId string                   `json:"organizationId"`
	Input          ContainerRepositoryInput `json:"input"`
}

// GetArtifactId returns __getContainerRepositoryInput.ArtifactId, and is useful for accessing the field via an interface.
func (v *__getContainerRepositoryInput) GetArtifactId() string { return v.ArtifactId }

// GetOrganizationId returns __getContainerRepositoryInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getContainerRepositoryInput) GetOrganizationId() string { return v.OrganizationId }

// GetInput returns __getContainerRepositoryInput.Input, and is useful for accessing the field via an interface.
func (v *__getContainerRepositoryInput) GetInput() ContainerRepositoryInput { return v.Input }

// __getDeploymentByIdInput is used internally by genqlient
type __getDeploymentByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getDeploymentByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getDeploymentByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetId() string { return v.Id }

// __getProjectByIdInput is used internally by genqlient
type __getProjectByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getProjectByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getProjectByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetId() string { return v.Id }

// deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload includes the requested fields of the GraphQL type TargetPayload.
type deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload struct {
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget `json:"result"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadMessagesValidationMessage `json:"messages"`
}

// GetSuccessful returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload.Successful, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload) GetSuccessful() bool {
	return v.Successful
}

// GetResult returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload.Result, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload) GetResult() deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget {
	return v.Result
}

// GetMessages returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload.Messages, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload) GetMessages() []deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadMessagesValidationMessage {
	return v.Messages
}

// deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadMessagesValidationMessage includes the requested fields of the GraphQL type ValidationMessage.
// The GraphQL type's documentation follows.
//
// Validation messages are returned when mutation input does not meet the requirements.
// While client-side validation is highly recommended to provide the best User Experience,
// All inputs will always be validated server-side.
//
// Some examples of validations are:
//
// * Username must be at least 10 characters
// * Email field does not contain an email address
// * Birth Date is required
//
// While GraphQL has support for required values, mutation data fields are always
// set to optional in our API. This allows 'required field' messages
// to be returned in the same manner as other validations. The only exceptions
// are id fields, which may be required to perform updates or deletes.
type deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadMessagesValidationMessage struct {
	// A friendly error message, appropriate for display to the end user.
	//
	// The message is interpolated to include the appropriate variables.
	//
	// Example: `Username must be at least 10 characters`
	//
	// This message may change without notice, so we do not recommend you match against the text.
	// Instead, use the *code* field for matching.
	Message string `json:"message"`
}

// GetMessage returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadMessagesValidationMessage.Message, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadMessagesValidationMessage) GetMessage() string {
	return v.Message
}

// deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget includes the requested fields of the GraphQL type Target.
type deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget.Id, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget) GetId() string {
	return v.Id
}

// GetSlug returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget.Slug, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget) GetSlug() string {
	return v.Slug
}

// deployPreviewEnvironmentResponse is returned by deployPreviewEnvironment on success.
type deployPreviewEnvironmentResponse struct {
	// Deploy a Preview Environment
	DeployPreviewEnvironment deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload `json:"deployPreviewEnvironment"`
}

// GetDeployPreviewEnvironment returns deployPreviewEnvironmentResponse.DeployPreviewEnvironment, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentResponse) GetDeployPreviewEnvironment() deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload {
	return v.DeployPreviewEnvironment
}

// getArtifactsByTypeArtifactsPaginatedArtifacts includes the requested fields of the GraphQL type PaginatedArtifacts.
type getArtifactsByTypeArtifactsPaginatedArtifacts struct {
	// A cursor to the next page of items in the list.
	Next string `json:"next"`
	// A list of type artifact.
	Items []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact `json:"items"`
}

// GetNext returns getArtifactsByTypeArtifactsPaginatedArtifacts.Next, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetNext() string { return v.Next }

// GetItems returns getArtifactsByTypeArtifactsPaginatedArtifacts.Items, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetItems() []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact {
	return v.Items
}

// getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact includes the requested fields of the GraphQL type Artifact.
type getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact struct {
	Name string `json:"name"`
	Id   string `json:"id"`
}

// GetName returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetName() string { return v.Name }

// GetId returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetId() string { return v.Id }

// getArtifactsByTypeResponse is returned by getArtifactsByType on success.
type getArtifactsByTypeResponse struct {
	// List all artifacts
	Artifacts getArtifactsByTypeArtifactsPaginatedArtifacts `json:"artifacts"`
}

// GetArtifacts returns getArtifactsByTypeResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeResponse) GetArtifacts() getArtifactsByTypeArtifactsPaginatedArtifacts {
	return v.Artifacts
}

// getContainerRepositoryContainerRepositoryContainerRepositoryAuth includes the requested fields of the GraphQL type ContainerRepositoryAuth.
type getContainerRepositoryContainerRepositoryContainerRepositoryAuth struct {
	RepoUri string `json:"repoUri"`
	Token   string `json:"token"`
}

// GetRepoUri returns getContainerRepositoryContainerRepositoryContainerRepositoryAuth.RepoUri, and is useful for accessing the field via an interface.
func (v *getContainerRepositoryContainerRepositoryContainerRepositoryAuth) GetRepoUri() string {
	return v.RepoUri
}

// GetToken returns getContainerRepositoryContainerRepositoryContainerRepositoryAuth.Token, and is useful for accessing the field via an interface.
func (v *getContainerRepositoryContainerRepositoryContainerRepositoryAuth) GetToken() string {
	return v.Token
}

// getContainerRepositoryResponse is returned by getContainerRepository on success.
type getContainerRepositoryResponse struct {
	ContainerRepository getContainerRepositoryContainerRepositoryContainerRepositoryAuth `json:"containerRepository"`
}

// GetContainerRepository returns getContainerRepositoryResponse.ContainerRepository, and is useful for accessing the field via an interface.
func (v *getContainerRepositoryResponse) GetContainerRepository() getContainerRepositoryContainerRepositoryContainerRepositoryAuth {
	return v.ContainerRepository
}

// getDeploymentByIdDeployment includes the requested fields of the GraphQL type Deployment.
type getDeploymentByIdDeployment struct {
	Id     string `json:"id"`
	Status string `json:"status"`
}

// GetId returns getDeploymentByIdDeployment.Id, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetId() string { return v.Id }

// GetStatus returns getDeploymentByIdDeployment.Status, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetStatus() string { return v.Status }

// getDeploymentByIdResponse is returned by getDeploymentById on success.
type getDeploymentByIdResponse struct {
	Deployment getDeploymentByIdDeployment `json:"deployment"`
}

// GetDeployment returns getDeploymentByIdResponse.Deployment, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdResponse) GetDeployment() getDeploymentByIdDeployment { return v.Deployment }

// getProjectByIdProject includes the requested fields of the GraphQL type Project.
type getProjectByIdProject struct {
	Id            string                 `json:"id"`
	DefaultParams map[string]interface{} `json:"-"`
	Slug          string                 `json:"slug"`
}

// GetId returns getProjectByIdProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetId() string { return v.Id }

// GetDefaultParams returns getProjectByIdProject.DefaultParams, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetDefaultParams() map[string]interface{} { return v.DefaultParams }

// GetSlug returns getProjectByIdProject.Slug, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetSlug() string { return v.Slug }

func (v *getProjectByIdProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectByIdProject
		DefaultParams json.RawMessage `json:"defaultParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectByIdProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DefaultParams
		src := firstPass.DefaultParams
		if len(src) != 0 && string(src) != "null" {
			err = json.Unmarshal(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getProjectByIdProject.DefaultParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetProjectByIdProject struct {
	Id string `json:"id"`

	DefaultParams json.RawMessage `json:"defaultParams"`

	Slug string `json:"slug"`
}

func (v *getProjectByIdProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectByIdProject) __premarshalJSON() (*__premarshalgetProjectByIdProject, error) {
	var retval __premarshalgetProjectByIdProject

	retval.Id = v.Id
	{

		dst := &retval.DefaultParams
		src := v.DefaultParams
		var err error
		*dst, err = jsonscalar.Marshal(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal getProjectByIdProject.DefaultParams: %w", err)
		}
	}
	retval.Slug = v.Slug
	return &retval, nil
}

// getProjectByIdResponse is returned by getProjectById on success.
type getProjectByIdResponse struct {
	Project getProjectByIdProject `json:"project"`
}

// GetProject returns getProjectByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectByIdResponse) GetProject() getProjectByIdProject { return v.Project }

func deployPreviewEnvironment(
	ctx context.Context,
	client graphql.Client,
	orgId string,
	projectId string,
	input PreviewEnvironmentInput,
) (*deployPreviewEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "deployPreviewEnvironment",
		Query: `
mutation deployPreviewEnvironment ($orgId: ID!, $projectId: ID!, $input: PreviewEnvironmentInput!) {
	deployPreviewEnvironment(projectId: $projectId, organizationId: $orgId, input: $input) {
		successful
		result {
			id
			slug
		}
		messages {
			message
		}
	}
}
`,
		Variables: &__deployPreviewEnvironmentInput{
			OrgId:     orgId,
			ProjectId: projectId,
			Input:     input,
		},
	}
	var err error

	var data deployPreviewEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getArtifactsByType(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	artifactType string,
) (*getArtifactsByTypeResponse, error) {
	req := &graphql.Request{
		OpName: "getArtifactsByType",
		Query: `
query getArtifactsByType ($organizationId: ID!, $artifactType: String!) {
	artifacts(organizationId: $organizationId, input: {filter:{type:$artifactType}}) {
		next
		items {
			name
			id
		}
	}
}
`,
		Variables: &__getArtifactsByTypeInput{
			OrganizationId: organizationId,
			ArtifactType:   artifactType,
		},
	}
	var err error

	var data getArtifactsByTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getContainerRepository(
	ctx context.Context,
	client graphql.Client,
	artifactId string,
	organizationId string,
	input ContainerRepositoryInput,
) (*getContainerRepositoryResponse, error) {
	req := &graphql.Request{
		OpName: "getContainerRepository",
		Query: `
query getContainerRepository ($artifactId: ID!, $organizationId: ID!, $input: ContainerRepositoryInput!) {
	containerRepository(artifactId: $artifactId, organizationId: $organizationId, input: $input) {
		repoUri
		token
	}
}
`,
		Variables: &__getContainerRepositoryInput{
			ArtifactId:     artifactId,
			OrganizationId: organizationId,
			Input:          input,
		},
	}
	var err error

	var data getContainerRepositoryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDeploymentById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getDeploymentByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getDeploymentById",
		Query: `
query getDeploymentById ($organizationId: ID!, $id: ID!) {
	deployment(organizationId: $organizationId, id: $id) {
		id
		status
	}
}
`,
		Variables: &__getDeploymentByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getDeploymentByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProjectById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getProjectByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectById",
		Query: `
query getProjectById ($organizationId: ID!, $id: ID!) {
	project(organizationId: $organizationId, id: $id) {
		id
		defaultParams
		slug
	}
}
`,
		Variables: &__getProjectByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getProjectByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
