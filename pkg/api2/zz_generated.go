// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api2

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// __getArtifactsByTypeInput is used internally by genqlient
type __getArtifactsByTypeInput struct {
	OrganizationId string `json:"organizationId"`
	ArtifactType   string `json:"artifactType"`
}

// GetOrganizationId returns __getArtifactsByTypeInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetOrganizationId() string { return v.OrganizationId }

// GetArtifactType returns __getArtifactsByTypeInput.ArtifactType, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetArtifactType() string { return v.ArtifactType }

// __getDeploymentByIdInput is used internally by genqlient
type __getDeploymentByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getDeploymentByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getDeploymentByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetId() string { return v.Id }

// __getProjectByIdInput is used internally by genqlient
type __getProjectByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getProjectByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getProjectByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetId() string { return v.Id }

// getArtifactsByTypeArtifactsPaginatedArtifacts includes the requested fields of the GraphQL type PaginatedArtifacts.
type getArtifactsByTypeArtifactsPaginatedArtifacts struct {
	// A cursor to the next page of items in the list.
	Next string `json:"next"`
	// A list of type artifact.
	Items []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact `json:"items"`
}

// GetNext returns getArtifactsByTypeArtifactsPaginatedArtifacts.Next, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetNext() string { return v.Next }

// GetItems returns getArtifactsByTypeArtifactsPaginatedArtifacts.Items, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetItems() []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact {
	return v.Items
}

// getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact includes the requested fields of the GraphQL type Artifact.
type getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact struct {
	Name string `json:"name"`
	Id   string `json:"id"`
}

// GetName returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetName() string { return v.Name }

// GetId returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetId() string { return v.Id }

// getArtifactsByTypeResponse is returned by getArtifactsByType on success.
type getArtifactsByTypeResponse struct {
	// List all artifacts
	Artifacts getArtifactsByTypeArtifactsPaginatedArtifacts `json:"artifacts"`
}

// GetArtifacts returns getArtifactsByTypeResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeResponse) GetArtifacts() getArtifactsByTypeArtifactsPaginatedArtifacts {
	return v.Artifacts
}

// getDeploymentByIdDeployment includes the requested fields of the GraphQL type Deployment.
type getDeploymentByIdDeployment struct {
	Id     string `json:"id"`
	Status string `json:"status"`
}

// GetId returns getDeploymentByIdDeployment.Id, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetId() string { return v.Id }

// GetStatus returns getDeploymentByIdDeployment.Status, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetStatus() string { return v.Status }

// getDeploymentByIdResponse is returned by getDeploymentById on success.
type getDeploymentByIdResponse struct {
	Deployment getDeploymentByIdDeployment `json:"deployment"`
}

// GetDeployment returns getDeploymentByIdResponse.Deployment, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdResponse) GetDeployment() getDeploymentByIdDeployment { return v.Deployment }

// getProjectByIdProject includes the requested fields of the GraphQL type Project.
type getProjectByIdProject struct {
	Id            string                 `json:"id"`
	DefaultParams map[string]interface{} `json:"-"`
	Slug          string                 `json:"slug"`
}

// GetId returns getProjectByIdProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetId() string { return v.Id }

// GetDefaultParams returns getProjectByIdProject.DefaultParams, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetDefaultParams() map[string]interface{} { return v.DefaultParams }

// GetSlug returns getProjectByIdProject.Slug, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetSlug() string { return v.Slug }

func (v *getProjectByIdProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectByIdProject
		DefaultParams json.RawMessage `json:"defaultParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectByIdProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DefaultParams
		src := firstPass.DefaultParams
		if len(src) != 0 && string(src) != "null" {
			err = json.Unmarshal(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getProjectByIdProject.DefaultParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetProjectByIdProject struct {
	Id string `json:"id"`

	DefaultParams json.RawMessage `json:"defaultParams"`

	Slug string `json:"slug"`
}

func (v *getProjectByIdProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectByIdProject) __premarshalJSON() (*__premarshalgetProjectByIdProject, error) {
	var retval __premarshalgetProjectByIdProject

	retval.Id = v.Id
	{

		dst := &retval.DefaultParams
		src := v.DefaultParams
		var err error
		*dst, err = json.Marshal(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal getProjectByIdProject.DefaultParams: %w", err)
		}
	}
	retval.Slug = v.Slug
	return &retval, nil
}

// getProjectByIdResponse is returned by getProjectById on success.
type getProjectByIdResponse struct {
	Project getProjectByIdProject `json:"project"`
}

// GetProject returns getProjectByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectByIdResponse) GetProject() getProjectByIdProject { return v.Project }

func getArtifactsByType(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	artifactType string,
) (*getArtifactsByTypeResponse, error) {
	req := &graphql.Request{
		OpName: "getArtifactsByType",
		Query: `
query getArtifactsByType ($organizationId: ID!, $artifactType: String!) {
	artifacts(organizationId: $organizationId, input: {filter:{type:$artifactType}}) {
		next
		items {
			name
			id
		}
	}
}
`,
		Variables: &__getArtifactsByTypeInput{
			OrganizationId: organizationId,
			ArtifactType:   artifactType,
		},
	}
	var err error

	var data getArtifactsByTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDeploymentById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getDeploymentByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getDeploymentById",
		Query: `
query getDeploymentById ($organizationId: ID!, $id: ID!) {
	deployment(organizationId: $organizationId, id: $id) {
		id
		status
	}
}
`,
		Variables: &__getDeploymentByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getDeploymentByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProjectById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getProjectByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectById",
		Query: `
query getProjectById ($organizationId: ID!, $id: ID!) {
	project(organizationId: $organizationId, id: $id) {
		id
		defaultParams
		slug
	}
}
`,
		Variables: &__getProjectByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getProjectByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
